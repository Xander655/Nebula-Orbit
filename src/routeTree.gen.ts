/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UnauthorizedImport } from './routes/unauthorized'
import { Route as IndexImport } from './routes/index'
import { Route as DirectoryIndexImport } from './routes/directory/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as AdminTimeoffIndexImport } from './routes/admin/timeoff/index'
import { Route as AdminLogsIndexImport } from './routes/admin/logs/index'
import { Route as AdminActiveDirectoryIndexImport } from './routes/admin/active-directory/index'
import { Route as AdminActiveDirectoryUsersImport } from './routes/admin/active-directory/users'
import { Route as AdminActiveDirectoryOrganizationalUnitsImport } from './routes/admin/active-directory/organizational-units'
import { Route as AdminActiveDirectoryGroupsImport } from './routes/admin/active-directory/groups'

// Create/Update Routes

const UnauthorizedRoute = UnauthorizedImport.update({
  id: '/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DirectoryIndexRoute = DirectoryIndexImport.update({
  id: '/directory/',
  path: '/directory/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRoute,
} as any)

const AdminTimeoffIndexRoute = AdminTimeoffIndexImport.update({
  id: '/admin/timeoff/',
  path: '/admin/timeoff/',
  getParentRoute: () => rootRoute,
} as any)

const AdminLogsIndexRoute = AdminLogsIndexImport.update({
  id: '/admin/logs/',
  path: '/admin/logs/',
  getParentRoute: () => rootRoute,
} as any)

const AdminActiveDirectoryIndexRoute = AdminActiveDirectoryIndexImport.update({
  id: '/admin/active-directory/',
  path: '/admin/active-directory/',
  getParentRoute: () => rootRoute,
} as any)

const AdminActiveDirectoryUsersRoute = AdminActiveDirectoryUsersImport.update({
  id: '/admin/active-directory/users',
  path: '/admin/active-directory/users',
  getParentRoute: () => rootRoute,
} as any)

const AdminActiveDirectoryOrganizationalUnitsRoute =
  AdminActiveDirectoryOrganizationalUnitsImport.update({
    id: '/admin/active-directory/organizational-units',
    path: '/admin/active-directory/organizational-units',
    getParentRoute: () => rootRoute,
  } as any)

const AdminActiveDirectoryGroupsRoute = AdminActiveDirectoryGroupsImport.update(
  {
    id: '/admin/active-directory/groups',
    path: '/admin/active-directory/groups',
    getParentRoute: () => rootRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof rootRoute
    }
    '/directory/': {
      id: '/directory/'
      path: '/directory'
      fullPath: '/directory'
      preLoaderRoute: typeof DirectoryIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/active-directory/groups': {
      id: '/admin/active-directory/groups'
      path: '/admin/active-directory/groups'
      fullPath: '/admin/active-directory/groups'
      preLoaderRoute: typeof AdminActiveDirectoryGroupsImport
      parentRoute: typeof rootRoute
    }
    '/admin/active-directory/organizational-units': {
      id: '/admin/active-directory/organizational-units'
      path: '/admin/active-directory/organizational-units'
      fullPath: '/admin/active-directory/organizational-units'
      preLoaderRoute: typeof AdminActiveDirectoryOrganizationalUnitsImport
      parentRoute: typeof rootRoute
    }
    '/admin/active-directory/users': {
      id: '/admin/active-directory/users'
      path: '/admin/active-directory/users'
      fullPath: '/admin/active-directory/users'
      preLoaderRoute: typeof AdminActiveDirectoryUsersImport
      parentRoute: typeof rootRoute
    }
    '/admin/active-directory/': {
      id: '/admin/active-directory/'
      path: '/admin/active-directory'
      fullPath: '/admin/active-directory'
      preLoaderRoute: typeof AdminActiveDirectoryIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/logs/': {
      id: '/admin/logs/'
      path: '/admin/logs'
      fullPath: '/admin/logs'
      preLoaderRoute: typeof AdminLogsIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/timeoff/': {
      id: '/admin/timeoff/'
      path: '/admin/timeoff'
      fullPath: '/admin/timeoff'
      preLoaderRoute: typeof AdminTimeoffIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/admin': typeof AdminIndexRoute
  '/directory': typeof DirectoryIndexRoute
  '/admin/active-directory/groups': typeof AdminActiveDirectoryGroupsRoute
  '/admin/active-directory/organizational-units': typeof AdminActiveDirectoryOrganizationalUnitsRoute
  '/admin/active-directory/users': typeof AdminActiveDirectoryUsersRoute
  '/admin/active-directory': typeof AdminActiveDirectoryIndexRoute
  '/admin/logs': typeof AdminLogsIndexRoute
  '/admin/timeoff': typeof AdminTimeoffIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/admin': typeof AdminIndexRoute
  '/directory': typeof DirectoryIndexRoute
  '/admin/active-directory/groups': typeof AdminActiveDirectoryGroupsRoute
  '/admin/active-directory/organizational-units': typeof AdminActiveDirectoryOrganizationalUnitsRoute
  '/admin/active-directory/users': typeof AdminActiveDirectoryUsersRoute
  '/admin/active-directory': typeof AdminActiveDirectoryIndexRoute
  '/admin/logs': typeof AdminLogsIndexRoute
  '/admin/timeoff': typeof AdminTimeoffIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/admin/': typeof AdminIndexRoute
  '/directory/': typeof DirectoryIndexRoute
  '/admin/active-directory/groups': typeof AdminActiveDirectoryGroupsRoute
  '/admin/active-directory/organizational-units': typeof AdminActiveDirectoryOrganizationalUnitsRoute
  '/admin/active-directory/users': typeof AdminActiveDirectoryUsersRoute
  '/admin/active-directory/': typeof AdminActiveDirectoryIndexRoute
  '/admin/logs/': typeof AdminLogsIndexRoute
  '/admin/timeoff/': typeof AdminTimeoffIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/unauthorized'
    | '/admin'
    | '/directory'
    | '/admin/active-directory/groups'
    | '/admin/active-directory/organizational-units'
    | '/admin/active-directory/users'
    | '/admin/active-directory'
    | '/admin/logs'
    | '/admin/timeoff'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/unauthorized'
    | '/admin'
    | '/directory'
    | '/admin/active-directory/groups'
    | '/admin/active-directory/organizational-units'
    | '/admin/active-directory/users'
    | '/admin/active-directory'
    | '/admin/logs'
    | '/admin/timeoff'
  id:
    | '__root__'
    | '/'
    | '/unauthorized'
    | '/admin/'
    | '/directory/'
    | '/admin/active-directory/groups'
    | '/admin/active-directory/organizational-units'
    | '/admin/active-directory/users'
    | '/admin/active-directory/'
    | '/admin/logs/'
    | '/admin/timeoff/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UnauthorizedRoute: typeof UnauthorizedRoute
  AdminIndexRoute: typeof AdminIndexRoute
  DirectoryIndexRoute: typeof DirectoryIndexRoute
  AdminActiveDirectoryGroupsRoute: typeof AdminActiveDirectoryGroupsRoute
  AdminActiveDirectoryOrganizationalUnitsRoute: typeof AdminActiveDirectoryOrganizationalUnitsRoute
  AdminActiveDirectoryUsersRoute: typeof AdminActiveDirectoryUsersRoute
  AdminActiveDirectoryIndexRoute: typeof AdminActiveDirectoryIndexRoute
  AdminLogsIndexRoute: typeof AdminLogsIndexRoute
  AdminTimeoffIndexRoute: typeof AdminTimeoffIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UnauthorizedRoute: UnauthorizedRoute,
  AdminIndexRoute: AdminIndexRoute,
  DirectoryIndexRoute: DirectoryIndexRoute,
  AdminActiveDirectoryGroupsRoute: AdminActiveDirectoryGroupsRoute,
  AdminActiveDirectoryOrganizationalUnitsRoute:
    AdminActiveDirectoryOrganizationalUnitsRoute,
  AdminActiveDirectoryUsersRoute: AdminActiveDirectoryUsersRoute,
  AdminActiveDirectoryIndexRoute: AdminActiveDirectoryIndexRoute,
  AdminLogsIndexRoute: AdminLogsIndexRoute,
  AdminTimeoffIndexRoute: AdminTimeoffIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/unauthorized",
        "/admin/",
        "/directory/",
        "/admin/active-directory/groups",
        "/admin/active-directory/organizational-units",
        "/admin/active-directory/users",
        "/admin/active-directory/",
        "/admin/logs/",
        "/admin/timeoff/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/unauthorized": {
      "filePath": "unauthorized.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.tsx"
    },
    "/directory/": {
      "filePath": "directory/index.tsx"
    },
    "/admin/active-directory/groups": {
      "filePath": "admin/active-directory/groups.tsx"
    },
    "/admin/active-directory/organizational-units": {
      "filePath": "admin/active-directory/organizational-units.tsx"
    },
    "/admin/active-directory/users": {
      "filePath": "admin/active-directory/users.tsx"
    },
    "/admin/active-directory/": {
      "filePath": "admin/active-directory/index.tsx"
    },
    "/admin/logs/": {
      "filePath": "admin/logs/index.tsx"
    },
    "/admin/timeoff/": {
      "filePath": "admin/timeoff/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
